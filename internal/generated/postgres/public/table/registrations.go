//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Registrations = newRegistrationsTable("public", "registrations", "")

type registrationsTable struct {
	postgres.Table

	// Columns
	GameID        postgres.ColumnInteger
	CreatedAt     postgres.ColumnTimestampz
	TeamName      postgres.ColumnString
	CaptainName   postgres.ColumnString
	Phone         postgres.ColumnString
	Telegram      postgres.ColumnString
	PlayersAmount postgres.ColumnInteger
	GroupName     postgres.ColumnString
	TeamID        postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type RegistrationsTable struct {
	registrationsTable

	EXCLUDED registrationsTable
}

// AS creates new RegistrationsTable with assigned alias
func (a RegistrationsTable) AS(alias string) *RegistrationsTable {
	return newRegistrationsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new RegistrationsTable with assigned schema name
func (a RegistrationsTable) FromSchema(schemaName string) *RegistrationsTable {
	return newRegistrationsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new RegistrationsTable with assigned table prefix
func (a RegistrationsTable) WithPrefix(prefix string) *RegistrationsTable {
	return newRegistrationsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new RegistrationsTable with assigned table suffix
func (a RegistrationsTable) WithSuffix(suffix string) *RegistrationsTable {
	return newRegistrationsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newRegistrationsTable(schemaName, tableName, alias string) *RegistrationsTable {
	return &RegistrationsTable{
		registrationsTable: newRegistrationsTableImpl(schemaName, tableName, alias),
		EXCLUDED:           newRegistrationsTableImpl("", "excluded", ""),
	}
}

func newRegistrationsTableImpl(schemaName, tableName, alias string) registrationsTable {
	var (
		GameIDColumn        = postgres.IntegerColumn("game_id")
		CreatedAtColumn     = postgres.TimestampzColumn("created_at")
		TeamNameColumn      = postgres.StringColumn("team_name")
		CaptainNameColumn   = postgres.StringColumn("captain_name")
		PhoneColumn         = postgres.StringColumn("phone")
		TelegramColumn      = postgres.StringColumn("telegram")
		PlayersAmountColumn = postgres.IntegerColumn("players_amount")
		GroupNameColumn     = postgres.StringColumn("group_name")
		TeamIDColumn        = postgres.StringColumn("team_id")
		allColumns          = postgres.ColumnList{GameIDColumn, CreatedAtColumn, TeamNameColumn, CaptainNameColumn, PhoneColumn, TelegramColumn, PlayersAmountColumn, GroupNameColumn, TeamIDColumn}
		mutableColumns      = postgres.ColumnList{GameIDColumn, CreatedAtColumn, TeamNameColumn, CaptainNameColumn, PhoneColumn, TelegramColumn, PlayersAmountColumn, GroupNameColumn, TeamIDColumn}
	)

	return registrationsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		GameID:        GameIDColumn,
		CreatedAt:     CreatedAtColumn,
		TeamName:      TeamNameColumn,
		CaptainName:   CaptainNameColumn,
		Phone:         PhoneColumn,
		Telegram:      TelegramColumn,
		PlayersAmount: PlayersAmountColumn,
		GroupName:     GroupNameColumn,
		TeamID:        TeamIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
