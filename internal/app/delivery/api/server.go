// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"time"

	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

// Defines values for RegistrationStatus.
const (
	Closed  RegistrationStatus = "closed"
	Ok      RegistrationStatus = "ok"
	Reserve RegistrationStatus = "reserve"
)

// CreateGameRequest defines model for CreateGameRequest.
type CreateGameRequest struct {
	Location             string    `json:"location"`
	MainAmount           int64     `json:"main_amount"`
	Name                 string    `json:"name"`
	RegistrationOpenTime time.Time `json:"registration_open_time"`
	ReserveAmount        int64     `json:"reserve_amount"`
	StartTime            time.Time `json:"start_time"`
}

// CreateGameResponse defines model for CreateGameResponse.
type CreateGameResponse struct {
	Id int64 `json:"id"`
}

// CreateRegistrationRequest defines model for CreateRegistrationRequest.
type CreateRegistrationRequest struct {
	CaptainName   string  `json:"captain_name"`
	GameId        int64   `json:"game_id"`
	GroupName     *string `json:"group_name,omitempty"`
	Phone         string  `json:"phone"`
	PlayersAmount int64   `json:"players_amount"`
	TeamId        *string `json:"team_id,omitempty"`
	TeamName      string  `json:"team_name"`
	Telegram      string  `json:"telegram"`
}

// CreateRegistrationResponse defines model for CreateRegistrationResponse.
type CreateRegistrationResponse struct {
	Status RegistrationStatus `json:"status"`
}

// Dummy defines model for Dummy.
type Dummy = map[string]interface{}

// Error defines model for Error.
type Error struct {
	Error string `json:"error"`
}

// ListGamesItem defines model for ListGamesItem.
type ListGamesItem struct {
	Id                   int64              `json:"id"`
	Location             string             `json:"location"`
	MainAmount           int64              `json:"main_amount"`
	Name                 string             `json:"name"`
	RegistrationOpenTime time.Time          `json:"registration_open_time"`
	RegistrationStatus   RegistrationStatus `json:"registration_status"`
	ReserveAmount        int64              `json:"reserve_amount"`
	StartTime            time.Time          `json:"start_time"`
}

// ListGamesResponse defines model for ListGamesResponse.
type ListGamesResponse = []ListGamesItem

// ListRegistrationsItem defines model for ListRegistrationsItem.
type ListRegistrationsItem struct {
	CaptainName   string    `json:"captain_name"`
	GroupName     *string   `json:"group_name,omitempty"`
	Number        int64     `json:"number"`
	Phone         string    `json:"phone"`
	PlayersAmount int64     `json:"players_amount"`
	RegisteredAt  time.Time `json:"registered_at"`
	TeamId        *string   `json:"team_id,omitempty"`
	TeamName      string    `json:"team_name"`
	Telegram      string    `json:"telegram"`
}

// ListRegistrationsResponse defines model for ListRegistrationsResponse.
type ListRegistrationsResponse = []ListRegistrationsItem

// LoginRequest defines model for LoginRequest.
type LoginRequest struct {
	Login    string `json:"login"`
	Password string `json:"password"`
}

// RegistrationStatus defines model for RegistrationStatus.
type RegistrationStatus string

// GetGamesParams defines parameters for GetGames.
type GetGamesParams struct {
	Page    int64 `form:"page" json:"page"`
	PerPage int64 `form:"per_page" json:"per_page"`
}

// PostGameJSONRequestBody defines body for PostGame for application/json ContentType.
type PostGameJSONRequestBody = CreateGameRequest

// PostLoginJSONRequestBody defines body for PostLogin for application/json ContentType.
type PostLoginJSONRequestBody = LoginRequest

// PostRegistrationJSONRequestBody defines body for PostRegistration for application/json ContentType.
type PostRegistrationJSONRequestBody = CreateRegistrationRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /auth)
	GetAuth(w http.ResponseWriter, r *http.Request)

	// (POST /game)
	PostGame(w http.ResponseWriter, r *http.Request)

	// (GET /games)
	GetGames(w http.ResponseWriter, r *http.Request, params GetGamesParams)

	// (GET /games/{id}/registrations)
	GetGamesIdRegistrations(w http.ResponseWriter, r *http.Request, id int64)

	// (POST /login)
	PostLogin(w http.ResponseWriter, r *http.Request)

	// (POST /registration)
	PostRegistration(w http.ResponseWriter, r *http.Request)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// (GET /auth)
func (_ Unimplemented) GetAuth(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /game)
func (_ Unimplemented) PostGame(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /games)
func (_ Unimplemented) GetGames(w http.ResponseWriter, r *http.Request, params GetGamesParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /games/{id}/registrations)
func (_ Unimplemented) GetGamesIdRegistrations(w http.ResponseWriter, r *http.Request, id int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /login)
func (_ Unimplemented) PostLogin(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /registration)
func (_ Unimplemented) PostRegistration(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetAuth operation middleware
func (siw *ServerInterfaceWrapper) GetAuth(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAuth(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostGame operation middleware
func (siw *ServerInterfaceWrapper) PostGame(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostGame(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetGames operation middleware
func (siw *ServerInterfaceWrapper) GetGames(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetGamesParams

	// ------------- Required query parameter "page" -------------

	if paramValue := r.URL.Query().Get("page"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "page"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Required query parameter "per_page" -------------

	if paramValue := r.URL.Query().Get("per_page"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "per_page"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "per_page", r.URL.Query(), &params.PerPage)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "per_page", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetGames(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetGamesIdRegistrations operation middleware
func (siw *ServerInterfaceWrapper) GetGamesIdRegistrations(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetGamesIdRegistrations(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostLogin operation middleware
func (siw *ServerInterfaceWrapper) PostLogin(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostLogin(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostRegistration operation middleware
func (siw *ServerInterfaceWrapper) PostRegistration(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostRegistration(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/auth", wrapper.GetAuth)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/game", wrapper.PostGame)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/games", wrapper.GetGames)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/games/{id}/registrations", wrapper.GetGamesIdRegistrations)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/login", wrapper.PostLogin)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/registration", wrapper.PostRegistration)
	})

	return r
}

type GetAuthRequestObject struct {
}

type GetAuthResponseObject interface {
	VisitGetAuthResponse(w http.ResponseWriter) error
}

type GetAuth200JSONResponse Dummy

func (response GetAuth200JSONResponse) VisitGetAuthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAuth401JSONResponse Error

func (response GetAuth401JSONResponse) VisitGetAuthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PostGameRequestObject struct {
	Body *PostGameJSONRequestBody
}

type PostGameResponseObject interface {
	VisitPostGameResponse(w http.ResponseWriter) error
}

type PostGame200JSONResponse CreateGameResponse

func (response PostGame200JSONResponse) VisitPostGameResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostGame400JSONResponse Error

func (response PostGame400JSONResponse) VisitPostGameResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostGame401JSONResponse Error

func (response PostGame401JSONResponse) VisitPostGameResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetGamesRequestObject struct {
	Params GetGamesParams
}

type GetGamesResponseObject interface {
	VisitGetGamesResponse(w http.ResponseWriter) error
}

type GetGames200JSONResponse ListGamesResponse

func (response GetGames200JSONResponse) VisitGetGamesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetGames400JSONResponse Error

func (response GetGames400JSONResponse) VisitGetGamesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetGamesIdRegistrationsRequestObject struct {
	Id int64 `json:"id"`
}

type GetGamesIdRegistrationsResponseObject interface {
	VisitGetGamesIdRegistrationsResponse(w http.ResponseWriter) error
}

type GetGamesIdRegistrations200JSONResponse ListRegistrationsResponse

func (response GetGamesIdRegistrations200JSONResponse) VisitGetGamesIdRegistrationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetGamesIdRegistrations400JSONResponse Error

func (response GetGamesIdRegistrations400JSONResponse) VisitGetGamesIdRegistrationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetGamesIdRegistrations401JSONResponse Error

func (response GetGamesIdRegistrations401JSONResponse) VisitGetGamesIdRegistrationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PostLoginRequestObject struct {
	Body *PostLoginJSONRequestBody
}

type PostLoginResponseObject interface {
	VisitPostLoginResponse(w http.ResponseWriter) error
}

type PostLogin200JSONResponse Dummy

func (response PostLogin200JSONResponse) VisitPostLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostLogin400JSONResponse Error

func (response PostLogin400JSONResponse) VisitPostLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostRegistrationRequestObject struct {
	Body *PostRegistrationJSONRequestBody
}

type PostRegistrationResponseObject interface {
	VisitPostRegistrationResponse(w http.ResponseWriter) error
}

type PostRegistration200JSONResponse CreateRegistrationResponse

func (response PostRegistration200JSONResponse) VisitPostRegistrationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostRegistration400JSONResponse Error

func (response PostRegistration400JSONResponse) VisitPostRegistrationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (GET /auth)
	GetAuth(ctx context.Context, request GetAuthRequestObject) (GetAuthResponseObject, error)

	// (POST /game)
	PostGame(ctx context.Context, request PostGameRequestObject) (PostGameResponseObject, error)

	// (GET /games)
	GetGames(ctx context.Context, request GetGamesRequestObject) (GetGamesResponseObject, error)

	// (GET /games/{id}/registrations)
	GetGamesIdRegistrations(ctx context.Context, request GetGamesIdRegistrationsRequestObject) (GetGamesIdRegistrationsResponseObject, error)

	// (POST /login)
	PostLogin(ctx context.Context, request PostLoginRequestObject) (PostLoginResponseObject, error)

	// (POST /registration)
	PostRegistration(ctx context.Context, request PostRegistrationRequestObject) (PostRegistrationResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// GetAuth operation middleware
func (sh *strictHandler) GetAuth(w http.ResponseWriter, r *http.Request) {
	var request GetAuthRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetAuth(ctx, request.(GetAuthRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAuth")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetAuthResponseObject); ok {
		if err := validResponse.VisitGetAuthResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostGame operation middleware
func (sh *strictHandler) PostGame(w http.ResponseWriter, r *http.Request) {
	var request PostGameRequestObject

	var body PostGameJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostGame(ctx, request.(PostGameRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostGame")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostGameResponseObject); ok {
		if err := validResponse.VisitPostGameResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetGames operation middleware
func (sh *strictHandler) GetGames(w http.ResponseWriter, r *http.Request, params GetGamesParams) {
	var request GetGamesRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetGames(ctx, request.(GetGamesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetGames")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetGamesResponseObject); ok {
		if err := validResponse.VisitGetGamesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetGamesIdRegistrations operation middleware
func (sh *strictHandler) GetGamesIdRegistrations(w http.ResponseWriter, r *http.Request, id int64) {
	var request GetGamesIdRegistrationsRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetGamesIdRegistrations(ctx, request.(GetGamesIdRegistrationsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetGamesIdRegistrations")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetGamesIdRegistrationsResponseObject); ok {
		if err := validResponse.VisitGetGamesIdRegistrationsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostLogin operation middleware
func (sh *strictHandler) PostLogin(w http.ResponseWriter, r *http.Request) {
	var request PostLoginRequestObject

	var body PostLoginJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostLogin(ctx, request.(PostLoginRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostLogin")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostLoginResponseObject); ok {
		if err := validResponse.VisitPostLoginResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostRegistration operation middleware
func (sh *strictHandler) PostRegistration(w http.ResponseWriter, r *http.Request) {
	var request PostRegistrationRequestObject

	var body PostRegistrationJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostRegistration(ctx, request.(PostRegistrationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostRegistration")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostRegistrationResponseObject); ok {
		if err := validResponse.VisitPostRegistrationResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}
